{
	"binaryTreeSnpt": {
		"prefix": "BT_implement",
		"body": [
			"",
			"template <typename T>",
			"class TreeNode",
			"{",
			"",
			"public:",
			"    T val;",
			"    TreeNode<T> *left;",
			"    TreeNode<T> *right;",
			"",
			"    TreeNode(T val)",
			"    {",
			"        this->val = val;",
			"        this->left = nullptr;",
			"        this->right = nullptr;",
			"    }",
			"};",
			"void printTree(TreeNode<int> *root)",
			"{",
			"    if (root == nullptr)",
			"    {",
			"        return;",
			"    }",
			"    queue<TreeNode<int> *> q;",
			"    q.push(root);",
			"",
			"    while (!q.empty())",
			"    {",
			"        auto currNode = q.front();",
			"        int currVal = currNode->val;",
			"        q.pop();",
			"",
			"        int leftVal = -1;",
			"        int rightVal = -1;",
			"",
			"        if (currNode->left != nullptr)",
			"        {",
			"            leftVal = currNode->left->val;",
			"            q.push(currNode->left);",
			"        }",
			"        if (currNode->right != nullptr)",
			"        {",
			"            rightVal = currNode->right->val;",
			"            q.push(currNode->right);",
			"        }",
			"",
			"        cout << currVal << \" --> L: \" << leftVal << \", R: \" << rightVal << endl;",
			"    }",
			"}",
			"",
			"//> SAMPLE INPUT:  vector<int> inputList{1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1};",
			"",
			"/*",
			"",
			"Ex_1: 1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
			"",
			"               1",
			"            /     \\",
			"           2       3",
			"         /   \\    /   \\",
			"        4     5  6     7",
			"",
			"",
			"Ex_2: 1 2 3 4 5 6 7 -1 -1 8 9 -1 -1 -1 -1 12 -1 11 14 -1 18 -1 -1 15 20 -1 -1 17 16 -1 -1 -1 -1 -1 -1",
			"vector<int> inputList{1 ,2 3, 4, 5, 6, 7, -1, -1, 8, 9, -1, -1, -1, -1, 12 ,-1, 11, 14, -1, 18, -1, -1, 15, 20 ,-1 ,-1, 17, 16, -1, -1, -1, -1, -1 ,-1};",
			"",
			"                1",
			"            /      \\",
			"           2        3",
			"         /   \\     /   \\",
			"        4     5   6     7",
			"            /   \\",
			"           8     9",
			"          /     /   \\",
			"         12     11    14",
			"          \\          / \\",
			"           18       15   20",
			"                    / \\",
			"                   17    16",
			"",
			"",
			"",
			"",
			"*/",
			"",
			"TreeNode<int> *buildTree(vector<int> inputList)",
			"{",
			"",
			"    int currIndex = 0;",
			"    int n = inputList.size();",
			"",
			"    if (n == 0 || inputList[0] == -1)",
			"    {",
			"        return nullptr;",
			"    }",
			"",
			"    TreeNode<int> *root = new TreeNode(inputList[currIndex]);",
			"    currIndex++;",
			"",
			"    queue<TreeNode<int> *> q;",
			"    q.push(root);",
			"",
			"    while (!q.empty())",
			"    {",
			"",
			"        auto currNode = q.front();",
			"        q.pop();",
			"",
			"        int leftChild = inputList[currIndex];",
			"        currIndex++;",
			"        if (leftChild != -1)",
			"        {",
			"            TreeNode<int> *leftNode = new TreeNode(leftChild);",
			"            currNode->left = leftNode;",
			"            q.push(leftNode);",
			"        }",
			"",
			"        int rightChild = inputList[currIndex];",
			"        currIndex++;",
			"        if (rightChild != -1)",
			"        {",
			"            TreeNode<int> *rightNode = new TreeNode(rightChild);",
			"            currNode->right = rightNode;",
			"            q.push(rightNode);",
			"        }",
			"    }",
			"",
			"    return root;",
			"}"
		],
		"description": ""
	}
}